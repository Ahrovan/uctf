#!/usr/bin/env python

import argparse
import fasteners
import netifaces
import os
import paramiko
import signal
import subprocess
import tempfile

from builtins import input
from uctf.spawn import vehicle_id_type

SUPPORTED_PAYLOADS_PER_HOST = 9

DEFAULT_SCRIMMAGE_CHECKOUT_LOCATION = os.path.expanduser('~/scrimmage-templates')
BEHAVIORS_XML_RELATIVE_PATH = 'plugins/autonomy/python/behaviors.xml'
KNOWN_HOSTS_FILE = os.path.expanduser("~/.ssh/known_hosts")
SCRIMMAGE_REPO_PATH = '/home/ubuntu/scrimmage-templates'
LAUNCH_TEMPLATE = """
<launch>
%(machine_entries)s
%(node_entries)s
</launch>
"""
MACHINE_TEMPLATE = """  <machine name="%(machine_name)s" address="%(ip)s" env-loader="%(env_loader)s" user="ubuntu"/>"""
NODE_TEMPLATE = """  <node pkg="uctf" type="spawn_%(team)s" name="%(node_name)s" args="%(machines)s --acs %(autopilot_network_interface)s --gazebo-ip 192.168.2.1 --local-ip %(ip)s" machine="%(machine_name)s" >
    <env name="SCRIMMAGE_TACTIC_INTERFACE_FILE" value="/home/ubuntu/scrimmage-templates/plugins/autonomy/python/behaviors.xml"/>
  </node>"""
LOCALHOST_MACHINE = """  <machine name="local" address="localhost" user="ubuntu"/>"""
LOCALHOST_NODE_TEMPLATE = """  <node pkg="uctf" type="%(node_name)s" name="%(node_name)s" args="%(arguments)s">
%(env_vars)s
  </node>"""
SWARM_COMMANDER_INI_FILENAME = '.swarm_commander.ini'
SWARM_COMMANDER_INI_FILE = """
[NETWORK]
device = %(device)s
port = 5554
acs_id = 250
"""
SWARM_ENV_VAR_TEMPLATE = """    <env name="SCRIMMAGE_TACTIC_INTERFACE_FILE" value="%(tactic_dir)s/plugins/autonomy/python/behaviors.xml"/>
    <env name="HOME" value="%(swarm_commander_home)s"/>"""


def validate_scrimmage_templates_arg(value):
    """Validate the vehicle_id_type from string to int."""
    behaviors_xml = os.path.join(value, BEHAVIORS_XML_RELATIVE_PATH)
    if not os.path.exists(behaviors_xml):
        raise argparse.ArgumentTypeError('%s was not found inside indicated repo: %s' % (BEHAVIORS_XML_RELATIVE_PATH, value))
    return value

def write_swarm_commander_ini(swarm_commander_home=None, device='tap0'):
    if not swarm_commander_home:
        swarm_commander_home = os.path.expanduser('~')
    swarm_commander_ini_filename_full = os.path.join(swarm_commander_home, SWARM_COMMANDER_INI_FILENAME)
    with open(swarm_commander_ini_filename_full, 'w') as fh:
        print("writing %s" % swarm_commander_ini_filename_full)
        fh.write(SWARM_COMMANDER_INI_FILE % locals())


def generate_launch_file(team, ips, vehicles, tactic_repo_path, ocu_network_interface, autopilot_network_interface='tap0', swarm_commander_home=os.path.expanduser('~')):
    machines = {}
    for count in range(0, len(ips)):
        machines[count] = []
        
    counter = 0
    for v in vehicles:
        machines[counter % len(ips)].append(v)
        counter += 1
    substitutions = {}
    machine_strs = []
    nodes = []
    
    
    for k, v in machines.items():
        subs = {}
        subs['ip'] = ips[k]
        subs['machines'] = ' '.join([str(i) for i in  v])
        if not subs['machines']:
            # Don't bother launching a machine with zero drones
            continue
        subs['team'] = team
        subs['count'] = k
        subs['machine_name'] = '_'.join([team, str(k)])
        subs['node_name'] = '_'.join([team, 'payload', str(k)])
        subs['env_loader'] = '/opt/sasc/bin/payload_env.sh'
        subs['autopilot_network_interface'] = autopilot_network_interface
        machine_strs.append(MACHINE_TEMPLATE % subs)
        nodes.append(NODE_TEMPLATE % subs)

    machine_strs.append(LOCALHOST_MACHINE)

    # Add FTI
    subs = {}
    subs['node_name'] = 'run_fti'
    subs['env_vars'] = ''
    subs['arguments'] = '-d %s -z' % ocu_network_interface
    nodes.append(LOCALHOST_NODE_TEMPLATE % subs)

    subs = {}
    subs['node_name'] = 'run_swarm_commander'
    subs['env_vars'] = SWARM_ENV_VAR_TEMPLATE % {'tactic_dir': tactic_repo_path, 'swarm_commander_home': swarm_commander_home}
    subs['arguments'] = ''
    nodes.append(LOCALHOST_NODE_TEMPLATE % subs)



    launch_subs = {}
    launch_subs['machine_entries'] = '\n'.join(machine_strs)
    launch_subs['node_entries'] = '\n'.join(nodes)

    launchfile = LAUNCH_TEMPLATE % launch_subs

    # print("launchfile is :", launchfile)
    return launchfile

def rsync_to_host(source, dest, dry_run=False):
    # Only rsa key as that's the one we're overrideing
    cmd = ['rsync', '--delete', '-ave', 'ssh -o HostKeyAlgorithms=ssh-rsa', source, dest]
    if dry_run:
        cmd.insert(1, '-n')
    print('rsyncing tactics to host: %s' % cmd)
    subprocess.check_call(cmd)

ENVIRONMENT_STRING = """PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games"
ROS_IP=%(ros_ip)s"""


def extend_environment(ros_ip, remote_filename='/etc/environment', dry_run=False):
    # Only rsa key as that's the one we're overrideing
    cmd = ['ssh', '-o', 'HostKeyAlgorithms=ssh-rsa', 'ubuntu@%s' % ros_ip, """sudo bash -c 'tee %s > /dev/null << EOF
%s
EOF'""" % (remote_filename, ENVIRONMENT_STRING % {'ros_ip': ros_ip})]
    if dry_run:
        cmd.insert(0, 'echo')
    # print('command ...... %s' % ' '.join(cmd))
    subprocess.check_call(cmd)


def get_vpn_address(device='tap0'):
    if not device in netifaces.interfaces():
        return None
    addrs = netifaces.ifaddresses(device)
    return addrs[netifaces.AF_INET][0]['addr']


def check_connection(host):
    with open(os.devnull, 'w') as devnull:
        ping_cmd = ('ping -c 1 %s' % host).split()
        try:
            subprocess.check_call(ping_cmd, stdout=devnull, stderr=devnull)
        except subprocess.CalledProcessError:
            print("Could not ping %s" % host)
            raise EnvironmentError("Could not reach %s, is it running?" % host)

    t = paramiko.transport.Transport('%s:%s' % (host, 22))
    t.start_client()
    key = t.get_remote_server_key()
    known_hosts = paramiko.hostkeys.HostKeys(KNOWN_HOSTS_FILE)
    # Key matches
    if not known_hosts.check(host, key):
        host_keys = known_hosts.lookup(host)
        if host_keys and 'ssh-rsa' not in host_keys.keys():
            print("adding ssh-rsa key for host %s" % host)
        else:
            print("overwriting ssh-rsa key for host %s" % host)
        known_hosts.add(host, 'ssh-rsa', key)
        known_hosts.save(KNOWN_HOSTS_FILE)

    agent = paramiko.agent.Agent()

    success = False
    for k in agent.get_keys():
        try:
            t.auth_publickey(username='ubuntu', key=k)
        except paramiko.SSHException:
            pass
        if t.is_authenticated():
            success = True
            break
    t.close()
    if not success:
        raise EnvironmentError("cannot authenticate an ssh connection to host %s aborting. Did you ssh-add the key file?" % host)

if __name__ == '__main__':
    parser = argparse.ArgumentParser('Deploy tactics and prepare remote machines')
    parser.add_argument("--hosts", type=int, default=1,
        help="Number of payload host machines")
    # parser.add_argument('--identity', '-i', default=None,
    #     help='SSH Identity to use for authentification')
    parser.add_argument('--dry-run', action='store_true')
    parser.add_argument('-y', '--autorun', action='store_true',
        help="Automatically run the launch file.")
    parser.add_argument('--scrimmage-repo', action='store', default=DEFAULT_SCRIMMAGE_CHECKOUT_LOCATION,
        type=validate_scrimmage_templates_arg)
    parser.add_argument('--first-copter', action='store', default=1, type=int,
        help="The first copter id")
    parser.add_argument('--first-plane', action='store', default=26, type=int,
        help="The first plane id")
    parser.add_argument('--copters', action='store', default=0, type=int,
        help="How many copters to clone if not passing them explicity by id.")
    parser.add_argument('--planes', action='store', default=0, type=int,
        help="How many planes to clone if not passing them explicity by id.")
    parser.add_argument('team', choices=['blue', 'gold'])
    parser.add_argument('--vpn-interface', action='store', default='tap0',
        help='The device name of the vpn network')
    parser.add_argument(
        'vehicle_id', nargs='*', metavar='VEHICLE_ID', type=vehicle_id_type,
        help='Specific vehicle ids to spawn.')
    args = parser.parse_args()

    if args.hosts < 1:
        parser.error("The number of hosts must be positive.")
    if args.copters < 0 or args.planes < 0:
        parser.error("Number of planes and copters must both be zero or positive.")

    if (args.planes or args.copters):
        if len(args.vehicle_id):
            parser.error("Passing vehicle ids (%s) is mutually exclusive with --copters and --planes" % args.vehicle_id)
        if (args.first_copter + args.copters > 26):
            parser.error("initial copter [%s] + numer of copters [%s] too high" % (args.first_copter, args.planes))
        if (args.first_plane + args.planes > 51):
            parser.error("initial plane [%s] + numer of copters [%s] too high" % (args.first_plane, args.planes))
        args.vehicle_id = [n + args.first_copter for n in range(0, args.copters)] + \
                          [n + args.first_plane for n in range(0, args.planes)]

    elif len(set(args.vehicle_id)) != len(args.vehicle_id):
        parser.error("vehicle_id's must be unique, %s" % args.vehicle_id)

    max_payloads = args.hosts * SUPPORTED_PAYLOADS_PER_HOST
    if len(args.vehicle_id) > max_payloads:
        parser.error("Too many vehicles: %s Only %s hosts * %s supported paylods = %s  are supported" %
                     (len(args.vehicle_id), args.hosts, SUPPORTED_PAYLOADS_PER_HOST, max_payloads))

    print("Vehicle IDs to start: %s" % args.vehicle_id)


    if args.team == 'blue':
        team_network = 2
    else:
        team_network = 3
    ips = ['192.168.%s.1%s' % (team_network, increment) for increment in range(0, args.hosts)]

    vpn_addr = get_vpn_address(args.vpn_interface)
    if not vpn_addr:
        parser.error("We did not find a vpn running, looking for [%s], aborting." % args.vpn_interface)

    machines = {}
    for ip in ips:
        print("Working on host %s" % ip)
        with fasteners.InterProcessLock('/tmp/sasc_deploy_known_hosts_lock_file'):
            check_connection(ip)
        rsync_to_host(os.path.join(args.scrimmage_repo, ''), 'ubuntu@%s:%s' % ( ip, SCRIMMAGE_REPO_PATH), dry_run=args.dry_run)
        extend_environment(ip)

    if not args.dry_run:
        swarm_commander_home = tempfile.mkdtemp(prefix="swarm_commander_home")
        write_swarm_commander_ini(swarm_commander_home, args.vpn_interface)
    else:
        swarm_commander_home = 'dry_run no swarm_commander_home generated'
        print("Dry run: Skipping swarm_commander_ini file update")

    launch_prefix = "sasc_launch_%s_%s_" % (args.team, '_'.join([str(v) for v in args.vehicle_id]))
    with tempfile.NamedTemporaryFile(mode='w', delete=False, prefix=launch_prefix, suffix='.launch') as lf:
        lf_filename = lf.name
        launchfile_str = generate_launch_file(args.team, ips, args.vehicle_id, args.scrimmage_repo, args.vpn_interface, swarm_commander_home=swarm_commander_home)
        lf.write(launchfile_str)
        print("created %s" % lf_filename)
    print("")
    print("")
    print("To run the payloads please invoke the following:")
    print("")
    # Shared ROS_MASTER_URI is not necessary but it will abort if the master is not reachable,
    # which means that gazebo is not roslaunched yet instead of failing subtly remotely.
    cmd = "ROS_HOSTNAME=%s ROS_MASTER_URI=http://192.168.2.1:11311 roslaunch %s" % (vpn_addr, lf_filename)
    print(cmd)
    # # TODO remove when autorun is ready https://gitlab.nps.edu/sasc/swarmcommander/issues/4
    # run = args.autorun
    # if not run:
    #     response = input('Would you like to run this automatically [y/N]')
    #     yeses = ['y', 'yes']
    #     if response.lower() in yeses:
    #         run = True

    # def execute(cmd):
    #     ctrl_c_pressed = False
    #     p = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    #     while p.poll() is None:
    #         try:
    #             for stdout_line in iter(p.stdout.readline, ""):
    #                 yield stdout_line
    #         except KeyboardInterrupt as ex:
    #             p.send_signal(signal.SIGINT)
    #             print("Sent roslaunch a sigint")
    #             ctrl_c_pressed = True
    #     p.stdout.close()
    #     return_code = p.wait()
    #     if return_code:
    #         if not (return_code == signal.SIGINT and ctrl_c_pressed):
    #             raise subprocess.CalledProcessError(return_code, cmd)
    # 
    # if run:
    #     for l in execute(cmd):
    #         print("roslaunch: %s" % l)
